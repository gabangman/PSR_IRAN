// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.1433
//


/// <remarks/>
[System.Web.Services.WebServiceBinding(Name="UserServiceSoap", Namespace="http://tempuri.org/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UserService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetUserSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckUserSessionByDeviceOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckUserSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateUserInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertUserAuthOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserAuthOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserAuthListByUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertUserTeamOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserTeamOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserTeamListByUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserCarOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertUserCarOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCarListByUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCarPartListByCarOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCarPartListByUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback PushUserMaterialOperationCompleted;
    
    private System.Threading.SendOrPostCallback PullUserMaterialOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserMaterialListByUserOperationCompleted;
    
    public UserService() {
        this.Url = "http://14.63.217.156:6060/PitInRacing/UserService.asmx";
    }
    
    public event GetUserSessionCompletedEventHandler GetUserSessionCompleted;
    
    public event CheckUserSessionByDeviceCompletedEventHandler CheckUserSessionByDeviceCompleted;
    
    public event CheckUserSessionCompletedEventHandler CheckUserSessionCompleted;
    
    public event CreateUserInfoCompletedEventHandler CreateUserInfoCompleted;
    
    public event UpdateUserInfoCompletedEventHandler UpdateUserInfoCompleted;
    
    public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
    
    public event InsertUserAuthCompletedEventHandler InsertUserAuthCompleted;
    
    public event UpdateUserAuthCompletedEventHandler UpdateUserAuthCompleted;
    
    public event GetUserAuthListByUserCompletedEventHandler GetUserAuthListByUserCompleted;
    
    public event InsertUserTeamCompletedEventHandler InsertUserTeamCompleted;
    
    public event UpdateUserTeamCompletedEventHandler UpdateUserTeamCompleted;
    
    public event GetUserTeamListByUserCompletedEventHandler GetUserTeamListByUserCompleted;
    
    public event UpdateUserCarCompletedEventHandler UpdateUserCarCompleted;
    
    public event InsertUserCarCompletedEventHandler InsertUserCarCompleted;
    
    public event GetUserCarListByUserCompletedEventHandler GetUserCarListByUserCompleted;
    
    public event GetUserCarPartListByCarCompletedEventHandler GetUserCarPartListByCarCompleted;
    
    public event GetUserCarPartListByUserCompletedEventHandler GetUserCarPartListByUserCompleted;
    
    public event PushUserMaterialCompletedEventHandler PushUserMaterialCompleted;
    
    public event PullUserMaterialCompletedEventHandler PullUserMaterialCompleted;
    
    public event GetUserMaterialListByUserCompletedEventHandler GetUserMaterialListByUserCompleted;
    
    /// <remarks>
///사용자 최초 연결시에  UserKey Session을 기록하고 리턴함.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult GetUserSession(int platformID, string deviceID) {
        object[] results = this.Invoke("GetUserSession", new object[] {
                    platformID,
                    deviceID});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserSession(int platformID, string deviceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserSession", new object[] {
                    platformID,
                    deviceID}, callback, asyncState);
    }
    
    public EventResult EndGetUserSession(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void GetUserSessionAsync(int platformID, string deviceID) {
        this.GetUserSessionAsync(platformID, deviceID, null);
    }
    
    public void GetUserSessionAsync(int platformID, string deviceID, object userState) {
        if ((this.GetUserSessionOperationCompleted == null)) {
            this.GetUserSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSessionCompleted);
        }
        this.InvokeAsync("GetUserSession", new object[] {
                    platformID,
                    deviceID}, this.GetUserSessionOperationCompleted, userState);
    }
    
    private void OnGetUserSessionCompleted(object arg) {
        if ((this.GetUserSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserSessionCompleted(this, new GetUserSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자의  UserKey Session이 정상적인지 확인함.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserSessionByDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult CheckUserSessionByDevice(int platformID, string deviceID, string userKey) {
        object[] results = this.Invoke("CheckUserSessionByDevice", new object[] {
                    platformID,
                    deviceID,
                    userKey});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginCheckUserSessionByDevice(int platformID, string deviceID, string userKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckUserSessionByDevice", new object[] {
                    platformID,
                    deviceID,
                    userKey}, callback, asyncState);
    }
    
    public EventResult EndCheckUserSessionByDevice(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void CheckUserSessionByDeviceAsync(int platformID, string deviceID, string userKey) {
        this.CheckUserSessionByDeviceAsync(platformID, deviceID, userKey, null);
    }
    
    public void CheckUserSessionByDeviceAsync(int platformID, string deviceID, string userKey, object userState) {
        if ((this.CheckUserSessionByDeviceOperationCompleted == null)) {
            this.CheckUserSessionByDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserSessionByDeviceCompleted);
        }
        this.InvokeAsync("CheckUserSessionByDevice", new object[] {
                    platformID,
                    deviceID,
                    userKey}, this.CheckUserSessionByDeviceOperationCompleted, userState);
    }
    
    private void OnCheckUserSessionByDeviceCompleted(object arg) {
        if ((this.CheckUserSessionByDeviceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckUserSessionByDeviceCompleted(this, new CheckUserSessionByDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자의  UserKey Session이 UserID로 정상적인지 확인함.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult CheckUserSession(long userID, string userKey) {
        object[] results = this.Invoke("CheckUserSession", new object[] {
                    userID,
                    userKey});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginCheckUserSession(long userID, string userKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckUserSession", new object[] {
                    userID,
                    userKey}, callback, asyncState);
    }
    
    public EventResult EndCheckUserSession(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void CheckUserSessionAsync(long userID, string userKey) {
        this.CheckUserSessionAsync(userID, userKey, null);
    }
    
    public void CheckUserSessionAsync(long userID, string userKey, object userState) {
        if ((this.CheckUserSessionOperationCompleted == null)) {
            this.CheckUserSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserSessionCompleted);
        }
        this.InvokeAsync("CheckUserSession", new object[] {
                    userID,
                    userKey}, this.CheckUserSessionOperationCompleted, userState);
    }
    
    private void OnCheckUserSessionCompleted(object arg) {
        if ((this.CheckUserSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckUserSessionCompleted(this, new CheckUserSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 정보를 생성하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult CreateUserInfo(string userKey, int platformID, string deviceID, string nickName) {
        object[] results = this.Invoke("CreateUserInfo", new object[] {
                    userKey,
                    platformID,
                    deviceID,
                    nickName});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateUserInfo(string userKey, int platformID, string deviceID, string nickName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateUserInfo", new object[] {
                    userKey,
                    platformID,
                    deviceID,
                    nickName}, callback, asyncState);
    }
    
    public EventResult EndCreateUserInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void CreateUserInfoAsync(string userKey, int platformID, string deviceID, string nickName) {
        this.CreateUserInfoAsync(userKey, platformID, deviceID, nickName, null);
    }
    
    public void CreateUserInfoAsync(string userKey, int platformID, string deviceID, string nickName, object userState) {
        if ((this.CreateUserInfoOperationCompleted == null)) {
            this.CreateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserInfoCompleted);
        }
        this.InvokeAsync("CreateUserInfo", new object[] {
                    userKey,
                    platformID,
                    deviceID,
                    nickName}, this.CreateUserInfoOperationCompleted, userState);
    }
    
    private void OnCreateUserInfoCompleted(object arg) {
        if ((this.CreateUserInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateUserInfoCompleted(this, new CreateUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 정보를 수정하는 메소드(NickName/Coin/Dollar/EXP/Fuel/CheckFuel/Team)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateUserInfo(string userKey, long userID, string command, string targetValue1, string targetValue2) {
        object[] results = this.Invoke("UpdateUserInfo", new object[] {
                    userKey,
                    userID,
                    command,
                    targetValue1,
                    targetValue2});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserInfo(string userKey, long userID, string command, string targetValue1, string targetValue2, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserInfo", new object[] {
                    userKey,
                    userID,
                    command,
                    targetValue1,
                    targetValue2}, callback, asyncState);
    }
    
    public EventResult EndUpdateUserInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateUserInfoAsync(string userKey, long userID, string command, string targetValue1, string targetValue2) {
        this.UpdateUserInfoAsync(userKey, userID, command, targetValue1, targetValue2, null);
    }
    
    public void UpdateUserInfoAsync(string userKey, long userID, string command, string targetValue1, string targetValue2, object userState) {
        if ((this.UpdateUserInfoOperationCompleted == null)) {
            this.UpdateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoCompleted);
        }
        this.InvokeAsync("UpdateUserInfo", new object[] {
                    userKey,
                    userID,
                    command,
                    targetValue1,
                    targetValue2}, this.UpdateUserInfoOperationCompleted, userState);
    }
    
    private void OnUpdateUserInfoCompleted(object arg) {
        if ((this.UpdateUserInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserInfoCompleted(this, new UpdateUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 정보(UserInfo)에서 해당하는 정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserInfo(string userKey, long userID) {
        object[] results = this.Invoke("GetUserInfo", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserInfo(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserInfo", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserInfoAsync(string userKey, long userID) {
        this.GetUserInfoAsync(userKey, userID, null);
    }
    
    public void GetUserInfoAsync(string userKey, long userID, object userState) {
        if ((this.GetUserInfoOperationCompleted == null)) {
            this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoCompleted);
        }
        this.InvokeAsync("GetUserInfo", new object[] {
                    userKey,
                    userID}, this.GetUserInfoOperationCompleted, userState);
    }
    
    private void OnGetUserInfoCompleted(object arg) {
        if ((this.GetUserInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 인증(UserAuth)를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertUserAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertUserAuth(string userKey, long userID, int authType, string authID, string authToken, string nickName, string profileURL) {
        object[] results = this.Invoke("InsertUserAuth", new object[] {
                    userKey,
                    userID,
                    authType,
                    authID,
                    authToken,
                    nickName,
                    profileURL});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertUserAuth(string userKey, long userID, int authType, string authID, string authToken, string nickName, string profileURL, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertUserAuth", new object[] {
                    userKey,
                    userID,
                    authType,
                    authID,
                    authToken,
                    nickName,
                    profileURL}, callback, asyncState);
    }
    
    public EventResult EndInsertUserAuth(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertUserAuthAsync(string userKey, long userID, int authType, string authID, string authToken, string nickName, string profileURL) {
        this.InsertUserAuthAsync(userKey, userID, authType, authID, authToken, nickName, profileURL, null);
    }
    
    public void InsertUserAuthAsync(string userKey, long userID, int authType, string authID, string authToken, string nickName, string profileURL, object userState) {
        if ((this.InsertUserAuthOperationCompleted == null)) {
            this.InsertUserAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertUserAuthCompleted);
        }
        this.InvokeAsync("InsertUserAuth", new object[] {
                    userKey,
                    userID,
                    authType,
                    authID,
                    authToken,
                    nickName,
                    profileURL}, this.InsertUserAuthOperationCompleted, userState);
    }
    
    private void OnInsertUserAuthCompleted(object arg) {
        if ((this.InsertUserAuthCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertUserAuthCompleted(this, new InsertUserAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 인증(UserAuth)를 수정하는 메소드(AuthToke/NickName/ProfileURL)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateUserAuth(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        object[] results = this.Invoke("UpdateUserAuth", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserAuth(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserAuth", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, callback, asyncState);
    }
    
    public EventResult EndUpdateUserAuth(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateUserAuthAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        this.UpdateUserAuthAsync(userKey, userID, targetID, command, targetValue1, targetValue2, null);
    }
    
    public void UpdateUserAuthAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, object userState) {
        if ((this.UpdateUserAuthOperationCompleted == null)) {
            this.UpdateUserAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserAuthCompleted);
        }
        this.InvokeAsync("UpdateUserAuth", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, this.UpdateUserAuthOperationCompleted, userState);
    }
    
    private void OnUpdateUserAuthCompleted(object arg) {
        if ((this.UpdateUserAuthCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserAuthCompleted(this, new UpdateUserAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 인증 정보(UserAuth)에서 해당 사용자의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserAuthListByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserAuthListByUser(string userKey, long userID) {
        object[] results = this.Invoke("GetUserAuthListByUser", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserAuthListByUser(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserAuthListByUser", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserAuthListByUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserAuthListByUserAsync(string userKey, long userID) {
        this.GetUserAuthListByUserAsync(userKey, userID, null);
    }
    
    public void GetUserAuthListByUserAsync(string userKey, long userID, object userState) {
        if ((this.GetUserAuthListByUserOperationCompleted == null)) {
            this.GetUserAuthListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAuthListByUserCompleted);
        }
        this.InvokeAsync("GetUserAuthListByUser", new object[] {
                    userKey,
                    userID}, this.GetUserAuthListByUserOperationCompleted, userState);
    }
    
    private void OnGetUserAuthListByUserCompleted(object arg) {
        if ((this.GetUserAuthListByUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserAuthListByUserCompleted(this, new GetUserAuthListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 팀(UserTeam)을 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertUserTeam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertUserTeam(string userKey, long userID, int crewID) {
        object[] results = this.Invoke("InsertUserTeam", new object[] {
                    userKey,
                    userID,
                    crewID});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertUserTeam(string userKey, long userID, int crewID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertUserTeam", new object[] {
                    userKey,
                    userID,
                    crewID}, callback, asyncState);
    }
    
    public EventResult EndInsertUserTeam(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertUserTeamAsync(string userKey, long userID, int crewID) {
        this.InsertUserTeamAsync(userKey, userID, crewID, null);
    }
    
    public void InsertUserTeamAsync(string userKey, long userID, int crewID, object userState) {
        if ((this.InsertUserTeamOperationCompleted == null)) {
            this.InsertUserTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertUserTeamCompleted);
        }
        this.InvokeAsync("InsertUserTeam", new object[] {
                    userKey,
                    userID,
                    crewID}, this.InsertUserTeamOperationCompleted, userState);
    }
    
    private void OnInsertUserTeamCompleted(object arg) {
        if ((this.InsertUserTeamCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertUserTeamCompleted(this, new InsertUserTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 팀(UserTeam)을 수정하는 메소드(Car)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserTeam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateUserTeam(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        object[] results = this.Invoke("UpdateUserTeam", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserTeam(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserTeam", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, callback, asyncState);
    }
    
    public EventResult EndUpdateUserTeam(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateUserTeamAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        this.UpdateUserTeamAsync(userKey, userID, targetID, command, targetValue1, targetValue2, null);
    }
    
    public void UpdateUserTeamAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, object userState) {
        if ((this.UpdateUserTeamOperationCompleted == null)) {
            this.UpdateUserTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserTeamCompleted);
        }
        this.InvokeAsync("UpdateUserTeam", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, this.UpdateUserTeamOperationCompleted, userState);
    }
    
    private void OnUpdateUserTeamCompleted(object arg) {
        if ((this.UpdateUserTeamCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserTeamCompleted(this, new UpdateUserTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 팀(UserTeam)에서 해당 사용자의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserTeamListByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserTeamListByUser(string userKey, long userID) {
        object[] results = this.Invoke("GetUserTeamListByUser", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserTeamListByUser(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserTeamListByUser", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserTeamListByUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserTeamListByUserAsync(string userKey, long userID) {
        this.GetUserTeamListByUserAsync(userKey, userID, null);
    }
    
    public void GetUserTeamListByUserAsync(string userKey, long userID, object userState) {
        if ((this.GetUserTeamListByUserOperationCompleted == null)) {
            this.GetUserTeamListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTeamListByUserCompleted);
        }
        this.InvokeAsync("GetUserTeamListByUser", new object[] {
                    userKey,
                    userID}, this.GetUserTeamListByUserOperationCompleted, userState);
    }
    
    private void OnGetUserTeamListByUserCompleted(object arg) {
        if ((this.GetUserTeamListByUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserTeamListByUserCompleted(this, new GetUserTeamListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 차량(UserCar)을 수정하는 메소드(Enhance)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserCar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateUserCar(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        object[] results = this.Invoke("UpdateUserCar", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserCar(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserCar", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, callback, asyncState);
    }
    
    public EventResult EndUpdateUserCar(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateUserCarAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2) {
        this.UpdateUserCarAsync(userKey, userID, targetID, command, targetValue1, targetValue2, null);
    }
    
    public void UpdateUserCarAsync(string userKey, long userID, long targetID, string command, string targetValue1, string targetValue2, object userState) {
        if ((this.UpdateUserCarOperationCompleted == null)) {
            this.UpdateUserCarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserCarCompleted);
        }
        this.InvokeAsync("UpdateUserCar", new object[] {
                    userKey,
                    userID,
                    targetID,
                    command,
                    targetValue1,
                    targetValue2}, this.UpdateUserCarOperationCompleted, userState);
    }
    
    private void OnUpdateUserCarCompleted(object arg) {
        if ((this.UpdateUserCarCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserCarCompleted(this, new UpdateUserCarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자차량(UserCar)을 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertUserCar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertUserCar(string userKey, long userID, int carID, int carClass) {
        object[] results = this.Invoke("InsertUserCar", new object[] {
                    userKey,
                    userID,
                    carID,
                    carClass});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertUserCar(string userKey, long userID, int carID, int carClass, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertUserCar", new object[] {
                    userKey,
                    userID,
                    carID,
                    carClass}, callback, asyncState);
    }
    
    public EventResult EndInsertUserCar(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertUserCarAsync(string userKey, long userID, int carID, int carClass) {
        this.InsertUserCarAsync(userKey, userID, carID, carClass, null);
    }
    
    public void InsertUserCarAsync(string userKey, long userID, int carID, int carClass, object userState) {
        if ((this.InsertUserCarOperationCompleted == null)) {
            this.InsertUserCarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertUserCarCompleted);
        }
        this.InvokeAsync("InsertUserCar", new object[] {
                    userKey,
                    userID,
                    carID,
                    carClass}, this.InsertUserCarOperationCompleted, userState);
    }
    
    private void OnInsertUserCarCompleted(object arg) {
        if ((this.InsertUserCarCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertUserCarCompleted(this, new InsertUserCarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자차(UserCar)에서 해당 사용자의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCarListByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserCarListByUser(string userKey, long userID) {
        object[] results = this.Invoke("GetUserCarListByUser", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserCarListByUser(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCarListByUser", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserCarListByUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserCarListByUserAsync(string userKey, long userID) {
        this.GetUserCarListByUserAsync(userKey, userID, null);
    }
    
    public void GetUserCarListByUserAsync(string userKey, long userID, object userState) {
        if ((this.GetUserCarListByUserOperationCompleted == null)) {
            this.GetUserCarListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCarListByUserCompleted);
        }
        this.InvokeAsync("GetUserCarListByUser", new object[] {
                    userKey,
                    userID}, this.GetUserCarListByUserOperationCompleted, userState);
    }
    
    private void OnGetUserCarListByUserCompleted(object arg) {
        if ((this.GetUserCarListByUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCarListByUserCompleted(this, new GetUserCarListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자차부품(UserCarPart)에서 해당 차량의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCarPartListByCar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserCarPartListByCar(string userKey, long userID, long targetID) {
        object[] results = this.Invoke("GetUserCarPartListByCar", new object[] {
                    userKey,
                    userID,
                    targetID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserCarPartListByCar(string userKey, long userID, long targetID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCarPartListByCar", new object[] {
                    userKey,
                    userID,
                    targetID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserCarPartListByCar(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserCarPartListByCarAsync(string userKey, long userID, long targetID) {
        this.GetUserCarPartListByCarAsync(userKey, userID, targetID, null);
    }
    
    public void GetUserCarPartListByCarAsync(string userKey, long userID, long targetID, object userState) {
        if ((this.GetUserCarPartListByCarOperationCompleted == null)) {
            this.GetUserCarPartListByCarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCarPartListByCarCompleted);
        }
        this.InvokeAsync("GetUserCarPartListByCar", new object[] {
                    userKey,
                    userID,
                    targetID}, this.GetUserCarPartListByCarOperationCompleted, userState);
    }
    
    private void OnGetUserCarPartListByCarCompleted(object arg) {
        if ((this.GetUserCarPartListByCarCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCarPartListByCarCompleted(this, new GetUserCarPartListByCarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자차부품(UserCarPart)에서 해당 사용자의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCarPartListByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserCarPartListByUser(string userKey, long userID) {
        object[] results = this.Invoke("GetUserCarPartListByUser", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserCarPartListByUser(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCarPartListByUser", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserCarPartListByUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserCarPartListByUserAsync(string userKey, long userID) {
        this.GetUserCarPartListByUserAsync(userKey, userID, null);
    }
    
    public void GetUserCarPartListByUserAsync(string userKey, long userID, object userState) {
        if ((this.GetUserCarPartListByUserOperationCompleted == null)) {
            this.GetUserCarPartListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCarPartListByUserCompleted);
        }
        this.InvokeAsync("GetUserCarPartListByUser", new object[] {
                    userKey,
                    userID}, this.GetUserCarPartListByUserOperationCompleted, userState);
    }
    
    private void OnGetUserCarPartListByUserCompleted(object arg) {
        if ((this.GetUserCarPartListByUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCarPartListByUserCompleted(this, new GetUserCarPartListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 재료(UserMaterial)을 누적하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PushUserMaterial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult PushUserMaterial(string userKey, long userID, int materialID, int materialCount) {
        object[] results = this.Invoke("PushUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginPushUserMaterial(string userKey, long userID, int materialID, int materialCount, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PushUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount}, callback, asyncState);
    }
    
    public EventResult EndPushUserMaterial(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void PushUserMaterialAsync(string userKey, long userID, int materialID, int materialCount) {
        this.PushUserMaterialAsync(userKey, userID, materialID, materialCount, null);
    }
    
    public void PushUserMaterialAsync(string userKey, long userID, int materialID, int materialCount, object userState) {
        if ((this.PushUserMaterialOperationCompleted == null)) {
            this.PushUserMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPushUserMaterialCompleted);
        }
        this.InvokeAsync("PushUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount}, this.PushUserMaterialOperationCompleted, userState);
    }
    
    private void OnPushUserMaterialCompleted(object arg) {
        if ((this.PushUserMaterialCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PushUserMaterialCompleted(this, new PushUserMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 재료(UserMaterial)을 추출하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PullUserMaterial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult PullUserMaterial(string userKey, long userID, int materialID, int materialCount) {
        object[] results = this.Invoke("PullUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginPullUserMaterial(string userKey, long userID, int materialID, int materialCount, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PullUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount}, callback, asyncState);
    }
    
    public EventResult EndPullUserMaterial(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void PullUserMaterialAsync(string userKey, long userID, int materialID, int materialCount) {
        this.PullUserMaterialAsync(userKey, userID, materialID, materialCount, null);
    }
    
    public void PullUserMaterialAsync(string userKey, long userID, int materialID, int materialCount, object userState) {
        if ((this.PullUserMaterialOperationCompleted == null)) {
            this.PullUserMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPullUserMaterialCompleted);
        }
        this.InvokeAsync("PullUserMaterial", new object[] {
                    userKey,
                    userID,
                    materialID,
                    materialCount}, this.PullUserMaterialOperationCompleted, userState);
    }
    
    private void OnPullUserMaterialCompleted(object arg) {
        if ((this.PullUserMaterialCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PullUserMaterialCompleted(this, new PullUserMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///사용자 재표(UserMaterial)에서 해당 사용자의  정보를 반환하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserMaterialListByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetUserMaterialListByUser(string userKey, long userID) {
        object[] results = this.Invoke("GetUserMaterialListByUser", new object[] {
                    userKey,
                    userID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserMaterialListByUser(string userKey, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserMaterialListByUser", new object[] {
                    userKey,
                    userID}, callback, asyncState);
    }
    
    public System.Data.DataSet EndGetUserMaterialListByUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetUserMaterialListByUserAsync(string userKey, long userID) {
        this.GetUserMaterialListByUserAsync(userKey, userID, null);
    }
    
    public void GetUserMaterialListByUserAsync(string userKey, long userID, object userState) {
        if ((this.GetUserMaterialListByUserOperationCompleted == null)) {
            this.GetUserMaterialListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserMaterialListByUserCompleted);
        }
        this.InvokeAsync("GetUserMaterialListByUser", new object[] {
                    userKey,
                    userID}, this.GetUserMaterialListByUserOperationCompleted, userState);
    }
    
    private void OnGetUserMaterialListByUserCompleted(object arg) {
        if ((this.GetUserMaterialListByUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserMaterialListByUserCompleted(this, new GetUserMaterialListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
public partial class EventResult {
    
    private string requestMethodField;
    
    private int resultCodeField;
    
    private string resultReferenceField;
    
    private bool battelEventField;
    
    private System.DateTime requestTimeField;
    
    private System.DateTime responseTimeField;
    
    /// <remarks/>
    public string RequestMethod {
        get {
            return this.requestMethodField;
        }
        set {
            this.requestMethodField = value;
        }
    }
    
    /// <remarks/>
    public int ResultCode {
        get {
            return this.resultCodeField;
        }
        set {
            this.resultCodeField = value;
        }
    }
    
    /// <remarks/>
    public string ResultReference {
        get {
            return this.resultReferenceField;
        }
        set {
            this.resultReferenceField = value;
        }
    }
    
    /// <remarks/>
    public bool BattelEvent {
        get {
            return this.battelEventField;
        }
        set {
            this.battelEventField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime RequestTime {
        get {
            return this.requestTimeField;
        }
        set {
            this.requestTimeField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime ResponseTime {
        get {
            return this.responseTimeField;
        }
        set {
            this.responseTimeField = value;
        }
    }
}

public partial class GetUserSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void GetUserSessionCompletedEventHandler(object sender, GetUserSessionCompletedEventArgs args);

public partial class CheckUserSessionByDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckUserSessionByDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void CheckUserSessionByDeviceCompletedEventHandler(object sender, CheckUserSessionByDeviceCompletedEventArgs args);

public partial class CheckUserSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckUserSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void CheckUserSessionCompletedEventHandler(object sender, CheckUserSessionCompletedEventArgs args);

public partial class CreateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void CreateUserInfoCompletedEventHandler(object sender, CreateUserInfoCompletedEventArgs args);

public partial class UpdateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateUserInfoCompletedEventHandler(object sender, UpdateUserInfoCompletedEventArgs args);

public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs args);

public partial class InsertUserAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertUserAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertUserAuthCompletedEventHandler(object sender, InsertUserAuthCompletedEventArgs args);

public partial class UpdateUserAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateUserAuthCompletedEventHandler(object sender, UpdateUserAuthCompletedEventArgs args);

public partial class GetUserAuthListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserAuthListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserAuthListByUserCompletedEventHandler(object sender, GetUserAuthListByUserCompletedEventArgs args);

public partial class InsertUserTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertUserTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertUserTeamCompletedEventHandler(object sender, InsertUserTeamCompletedEventArgs args);

public partial class UpdateUserTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateUserTeamCompletedEventHandler(object sender, UpdateUserTeamCompletedEventArgs args);

public partial class GetUserTeamListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserTeamListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserTeamListByUserCompletedEventHandler(object sender, GetUserTeamListByUserCompletedEventArgs args);

public partial class UpdateUserCarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserCarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateUserCarCompletedEventHandler(object sender, UpdateUserCarCompletedEventArgs args);

public partial class InsertUserCarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertUserCarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertUserCarCompletedEventHandler(object sender, InsertUserCarCompletedEventArgs args);

public partial class GetUserCarListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCarListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserCarListByUserCompletedEventHandler(object sender, GetUserCarListByUserCompletedEventArgs args);

public partial class GetUserCarPartListByCarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCarPartListByCarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserCarPartListByCarCompletedEventHandler(object sender, GetUserCarPartListByCarCompletedEventArgs args);

public partial class GetUserCarPartListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCarPartListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserCarPartListByUserCompletedEventHandler(object sender, GetUserCarPartListByUserCompletedEventArgs args);

public partial class PushUserMaterialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PushUserMaterialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void PushUserMaterialCompletedEventHandler(object sender, PushUserMaterialCompletedEventArgs args);

public partial class PullUserMaterialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PullUserMaterialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void PullUserMaterialCompletedEventHandler(object sender, PullUserMaterialCompletedEventArgs args);

public partial class GetUserMaterialListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserMaterialListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetUserMaterialListByUserCompletedEventHandler(object sender, GetUserMaterialListByUserCompletedEventArgs args);
