// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.1433
//


/// <remarks/>
[System.Web.Services.WebServiceBinding(Name="PitInRacing_x0020_ResourceSoap", Namespace="http://gabangmanstudio.com/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PitInRacingResource : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback InsertPlatformInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdatePlatformInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPlatformInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertSeasonInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateSeasonInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSeasonInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetTrackInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertCrewInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCrewInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCrewInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertCarClassOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCarClassOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCarClassListOperationCompleted;
    
    private System.Threading.SendOrPostCallback InsertCarInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCarInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCarInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCarPartGradeListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCarPartLevelListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCardInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMaterialInfoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLuckyBoxListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLuckyBoxGoodListOperationCompleted;
    
    public PitInRacingResource() {
        this.Url = "http://14.63.217.156:6060/PitInRacing/Resource.asmx";
    }
    
    public event InsertPlatformInfoCompletedEventHandler InsertPlatformInfoCompleted;
    
    public event UpdatePlatformInfoCompletedEventHandler UpdatePlatformInfoCompleted;
    
    public event GetPlatformInfoListCompletedEventHandler GetPlatformInfoListCompleted;
    
    public event InsertSeasonInfoCompletedEventHandler InsertSeasonInfoCompleted;
    
    public event UpdateSeasonInfoCompletedEventHandler UpdateSeasonInfoCompleted;
    
    public event GetSeasonInfoListCompletedEventHandler GetSeasonInfoListCompleted;
    
    public event GetTrackInfoListCompletedEventHandler GetTrackInfoListCompleted;
    
    public event InsertCrewInfoCompletedEventHandler InsertCrewInfoCompleted;
    
    public event UpdateCrewInfoCompletedEventHandler UpdateCrewInfoCompleted;
    
    public event GetCrewInfoListCompletedEventHandler GetCrewInfoListCompleted;
    
    public event InsertCarClassCompletedEventHandler InsertCarClassCompleted;
    
    public event UpdateCarClassCompletedEventHandler UpdateCarClassCompleted;
    
    public event GetCarClassListCompletedEventHandler GetCarClassListCompleted;
    
    public event InsertCarInfoCompletedEventHandler InsertCarInfoCompleted;
    
    public event UpdateCarInfoCompletedEventHandler UpdateCarInfoCompleted;
    
    public event GetCarInfoListCompletedEventHandler GetCarInfoListCompleted;
    
    public event GetCarPartGradeListCompletedEventHandler GetCarPartGradeListCompleted;
    
    public event GetCarPartLevelListCompletedEventHandler GetCarPartLevelListCompleted;
    
    public event GetCardInfoListCompletedEventHandler GetCardInfoListCompleted;
    
    public event GetMaterialInfoListCompletedEventHandler GetMaterialInfoListCompleted;
    
    public event GetLuckyBoxListCompletedEventHandler GetLuckyBoxListCompleted;
    
    public event GetLuckyBoxGoodListCompletedEventHandler GetLuckyBoxGoodListCompleted;
    
    /// <remarks>
///PlatformInfo에 정보를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/InsertPlatformInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertPlatformInfo(string code, string nameKr) {
        object[] results = this.Invoke("InsertPlatformInfo", new object[] {
                    code,
                    nameKr});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertPlatformInfo(string code, string nameKr, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertPlatformInfo", new object[] {
                    code,
                    nameKr}, callback, asyncState);
    }
    
    public EventResult EndInsertPlatformInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertPlatformInfoAsync(string code, string nameKr) {
        this.InsertPlatformInfoAsync(code, nameKr, null);
    }
    
    public void InsertPlatformInfoAsync(string code, string nameKr, object userState) {
        if ((this.InsertPlatformInfoOperationCompleted == null)) {
            this.InsertPlatformInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPlatformInfoCompleted);
        }
        this.InvokeAsync("InsertPlatformInfo", new object[] {
                    code,
                    nameKr}, this.InsertPlatformInfoOperationCompleted, userState);
    }
    
    private void OnInsertPlatformInfoCompleted(object arg) {
        if ((this.InsertPlatformInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertPlatformInfoCompleted(this, new InsertPlatformInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///PlatformInfo에 정보를 수정하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/UpdatePlatformInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdatePlatformInfo(int targetID, string code, string nameKr) {
        object[] results = this.Invoke("UpdatePlatformInfo", new object[] {
                    targetID,
                    code,
                    nameKr});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdatePlatformInfo(int targetID, string code, string nameKr, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePlatformInfo", new object[] {
                    targetID,
                    code,
                    nameKr}, callback, asyncState);
    }
    
    public EventResult EndUpdatePlatformInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdatePlatformInfoAsync(int targetID, string code, string nameKr) {
        this.UpdatePlatformInfoAsync(targetID, code, nameKr, null);
    }
    
    public void UpdatePlatformInfoAsync(int targetID, string code, string nameKr, object userState) {
        if ((this.UpdatePlatformInfoOperationCompleted == null)) {
            this.UpdatePlatformInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlatformInfoCompleted);
        }
        this.InvokeAsync("UpdatePlatformInfo", new object[] {
                    targetID,
                    code,
                    nameKr}, this.UpdatePlatformInfoOperationCompleted, userState);
    }
    
    private void OnUpdatePlatformInfoCompleted(object arg) {
        if ((this.UpdatePlatformInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdatePlatformInfoCompleted(this, new UpdatePlatformInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///PlatformInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetPlatformInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetPlatformInfoList() {
        object[] results = this.Invoke("GetPlatformInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetPlatformInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPlatformInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetPlatformInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetPlatformInfoListAsync() {
        this.GetPlatformInfoListAsync(null);
    }
    
    public void GetPlatformInfoListAsync(object userState) {
        if ((this.GetPlatformInfoListOperationCompleted == null)) {
            this.GetPlatformInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlatformInfoListCompleted);
        }
        this.InvokeAsync("GetPlatformInfoList", new object[0], this.GetPlatformInfoListOperationCompleted, userState);
    }
    
    private void OnGetPlatformInfoListCompleted(object arg) {
        if ((this.GetPlatformInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPlatformInfoListCompleted(this, new GetPlatformInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SeasonInfo에 정보를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/InsertSeasonInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertSeasonInfo(string code, string nameKr, int seasonNo, int crewID, int trackID) {
        object[] results = this.Invoke("InsertSeasonInfo", new object[] {
                    code,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertSeasonInfo(string code, string nameKr, int seasonNo, int crewID, int trackID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertSeasonInfo", new object[] {
                    code,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID}, callback, asyncState);
    }
    
    public EventResult EndInsertSeasonInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertSeasonInfoAsync(string code, string nameKr, int seasonNo, int crewID, int trackID) {
        this.InsertSeasonInfoAsync(code, nameKr, seasonNo, crewID, trackID, null);
    }
    
    public void InsertSeasonInfoAsync(string code, string nameKr, int seasonNo, int crewID, int trackID, object userState) {
        if ((this.InsertSeasonInfoOperationCompleted == null)) {
            this.InsertSeasonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSeasonInfoCompleted);
        }
        this.InvokeAsync("InsertSeasonInfo", new object[] {
                    code,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID}, this.InsertSeasonInfoOperationCompleted, userState);
    }
    
    private void OnInsertSeasonInfoCompleted(object arg) {
        if ((this.InsertSeasonInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertSeasonInfoCompleted(this, new InsertSeasonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SeasonInfo에 정보를 수정하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/UpdateSeasonInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateSeasonInfo(int targetID, string nameKr, int seasonNo, int crewID, int trackID) {
        object[] results = this.Invoke("UpdateSeasonInfo", new object[] {
                    targetID,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateSeasonInfo(int targetID, string nameKr, int seasonNo, int crewID, int trackID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSeasonInfo", new object[] {
                    targetID,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID}, callback, asyncState);
    }
    
    public EventResult EndUpdateSeasonInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateSeasonInfoAsync(int targetID, string nameKr, int seasonNo, int crewID, int trackID) {
        this.UpdateSeasonInfoAsync(targetID, nameKr, seasonNo, crewID, trackID, null);
    }
    
    public void UpdateSeasonInfoAsync(int targetID, string nameKr, int seasonNo, int crewID, int trackID, object userState) {
        if ((this.UpdateSeasonInfoOperationCompleted == null)) {
            this.UpdateSeasonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSeasonInfoCompleted);
        }
        this.InvokeAsync("UpdateSeasonInfo", new object[] {
                    targetID,
                    nameKr,
                    seasonNo,
                    crewID,
                    trackID}, this.UpdateSeasonInfoOperationCompleted, userState);
    }
    
    private void OnUpdateSeasonInfoCompleted(object arg) {
        if ((this.UpdateSeasonInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateSeasonInfoCompleted(this, new UpdateSeasonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SeasonInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetSeasonInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetSeasonInfoList() {
        object[] results = this.Invoke("GetSeasonInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSeasonInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSeasonInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetSeasonInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetSeasonInfoListAsync() {
        this.GetSeasonInfoListAsync(null);
    }
    
    public void GetSeasonInfoListAsync(object userState) {
        if ((this.GetSeasonInfoListOperationCompleted == null)) {
            this.GetSeasonInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeasonInfoListCompleted);
        }
        this.InvokeAsync("GetSeasonInfoList", new object[0], this.GetSeasonInfoListOperationCompleted, userState);
    }
    
    private void OnGetSeasonInfoListCompleted(object arg) {
        if ((this.GetSeasonInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSeasonInfoListCompleted(this, new GetSeasonInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///TrackInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetTrackInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetTrackInfoList() {
        object[] results = this.Invoke("GetTrackInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetTrackInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTrackInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetTrackInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetTrackInfoListAsync() {
        this.GetTrackInfoListAsync(null);
    }
    
    public void GetTrackInfoListAsync(object userState) {
        if ((this.GetTrackInfoListOperationCompleted == null)) {
            this.GetTrackInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackInfoListCompleted);
        }
        this.InvokeAsync("GetTrackInfoList", new object[0], this.GetTrackInfoListOperationCompleted, userState);
    }
    
    private void OnGetTrackInfoListCompleted(object arg) {
        if ((this.GetTrackInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTrackInfoListCompleted(this, new GetTrackInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CrewInfo에 정보를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/InsertCrewInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertCrewInfo(string code, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime) {
        object[] results = this.Invoke("InsertCrewInfo", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertCrewInfo(string code, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertCrewInfo", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime}, callback, asyncState);
    }
    
    public EventResult EndInsertCrewInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertCrewInfoAsync(string code, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime) {
        this.InsertCrewInfoAsync(code, nameKr, cModel, cClass, requireLevel, upLimit, starLevel, driverBonus, tireManSpin, chiefSignal, jackManSpeed, gasManTime, null);
    }
    
    public void InsertCrewInfoAsync(string code, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime, object userState) {
        if ((this.InsertCrewInfoOperationCompleted == null)) {
            this.InsertCrewInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCrewInfoCompleted);
        }
        this.InvokeAsync("InsertCrewInfo", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime}, this.InsertCrewInfoOperationCompleted, userState);
    }
    
    private void OnInsertCrewInfoCompleted(object arg) {
        if ((this.InsertCrewInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertCrewInfoCompleted(this, new InsertCrewInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CrewInfo에 정보를 수정하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/UpdateCrewInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateCrewInfo(int targetID, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime) {
        object[] results = this.Invoke("UpdateCrewInfo", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateCrewInfo(int targetID, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCrewInfo", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime}, callback, asyncState);
    }
    
    public EventResult EndUpdateCrewInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateCrewInfoAsync(int targetID, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime) {
        this.UpdateCrewInfoAsync(targetID, nameKr, cModel, cClass, requireLevel, upLimit, starLevel, driverBonus, tireManSpin, chiefSignal, jackManSpeed, gasManTime, null);
    }
    
    public void UpdateCrewInfoAsync(int targetID, string nameKr, int cModel, int cClass, int requireLevel, int upLimit, int starLevel, int driverBonus, int tireManSpin, int chiefSignal, int jackManSpeed, int gasManTime, object userState) {
        if ((this.UpdateCrewInfoOperationCompleted == null)) {
            this.UpdateCrewInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCrewInfoCompleted);
        }
        this.InvokeAsync("UpdateCrewInfo", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    requireLevel,
                    upLimit,
                    starLevel,
                    driverBonus,
                    tireManSpin,
                    chiefSignal,
                    jackManSpeed,
                    gasManTime}, this.UpdateCrewInfoOperationCompleted, userState);
    }
    
    private void OnUpdateCrewInfoCompleted(object arg) {
        if ((this.UpdateCrewInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCrewInfoCompleted(this, new UpdateCrewInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CrewInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCrewInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCrewInfoList() {
        object[] results = this.Invoke("GetCrewInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCrewInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCrewInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCrewInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCrewInfoListAsync() {
        this.GetCrewInfoListAsync(null);
    }
    
    public void GetCrewInfoListAsync(object userState) {
        if ((this.GetCrewInfoListOperationCompleted == null)) {
            this.GetCrewInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCrewInfoListCompleted);
        }
        this.InvokeAsync("GetCrewInfoList", new object[0], this.GetCrewInfoListOperationCompleted, userState);
    }
    
    private void OnGetCrewInfoListCompleted(object arg) {
        if ((this.GetCrewInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCrewInfoListCompleted(this, new GetCrewInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///자동차분류(CarClass)에 정보를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/InsertCarClass", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertCarClass(string code, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice) {
        object[] results = this.Invoke("InsertCarClass", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertCarClass(string code, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertCarClass", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice}, callback, asyncState);
    }
    
    public EventResult EndInsertCarClass(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertCarClassAsync(string code, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice) {
        this.InsertCarClassAsync(code, nameKr, cModel, cClass, powerMin, powerMax, upLimit, starLevel, durabilityMin, durabilityMax, durabilityRepair, brakeDec, sellPrice, null);
    }
    
    public void InsertCarClassAsync(string code, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice, object userState) {
        if ((this.InsertCarClassOperationCompleted == null)) {
            this.InsertCarClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCarClassCompleted);
        }
        this.InvokeAsync("InsertCarClass", new object[] {
                    code,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice}, this.InsertCarClassOperationCompleted, userState);
    }
    
    private void OnInsertCarClassCompleted(object arg) {
        if ((this.InsertCarClassCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertCarClassCompleted(this, new InsertCarClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///자동차분류(CarClass)에 정보를 수정하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/UpdateCarClass", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateCarClass(int targetID, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice) {
        object[] results = this.Invoke("UpdateCarClass", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateCarClass(int targetID, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCarClass", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice}, callback, asyncState);
    }
    
    public EventResult EndUpdateCarClass(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateCarClassAsync(int targetID, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice) {
        this.UpdateCarClassAsync(targetID, nameKr, cModel, cClass, powerMin, powerMax, upLimit, starLevel, durabilityMin, durabilityMax, durabilityRepair, brakeDec, sellPrice, null);
    }
    
    public void UpdateCarClassAsync(int targetID, string nameKr, int cModel, int cClass, int powerMin, int powerMax, int upLimit, int starLevel, int durabilityMin, int durabilityMax, int durabilityRepair, int brakeDec, int sellPrice, object userState) {
        if ((this.UpdateCarClassOperationCompleted == null)) {
            this.UpdateCarClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCarClassCompleted);
        }
        this.InvokeAsync("UpdateCarClass", new object[] {
                    targetID,
                    nameKr,
                    cModel,
                    cClass,
                    powerMin,
                    powerMax,
                    upLimit,
                    starLevel,
                    durabilityMin,
                    durabilityMax,
                    durabilityRepair,
                    brakeDec,
                    sellPrice}, this.UpdateCarClassOperationCompleted, userState);
    }
    
    private void OnUpdateCarClassCompleted(object arg) {
        if ((this.UpdateCarClassCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCarClassCompleted(this, new UpdateCarClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///자동차분류(CarClass)의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCarClassList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCarClassList() {
        object[] results = this.Invoke("GetCarClassList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCarClassList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCarClassList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCarClassList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCarClassListAsync() {
        this.GetCarClassListAsync(null);
    }
    
    public void GetCarClassListAsync(object userState) {
        if ((this.GetCarClassListOperationCompleted == null)) {
            this.GetCarClassListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarClassListCompleted);
        }
        this.InvokeAsync("GetCarClassList", new object[0], this.GetCarClassListOperationCompleted, userState);
    }
    
    private void OnGetCarClassListCompleted(object arg) {
        if ((this.GetCarClassListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCarClassListCompleted(this, new GetCarClassListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CarInfo에 정보를 추가하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/InsertCarInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult InsertCarInfo(string code, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble) {
        object[] results = this.Invoke("InsertCarInfo", new object[] {
                    code,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginInsertCarInfo(string code, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InsertCarInfo", new object[] {
                    code,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble}, callback, asyncState);
    }
    
    public EventResult EndInsertCarInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void InsertCarInfoAsync(string code, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble) {
        this.InsertCarInfoAsync(code, nameKr, carModel, requireLevel, controlProperty, power, weight, grip, gearBox, brakeStepDec, durability, boostPower, boostTime, rpm, rpmMax, rpmBoost, gearLimit, resourceType, payCoin, payDollar, sellDollar, couponCount, sponsorAble, null);
    }
    
    public void InsertCarInfoAsync(string code, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble, object userState) {
        if ((this.InsertCarInfoOperationCompleted == null)) {
            this.InsertCarInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCarInfoCompleted);
        }
        this.InvokeAsync("InsertCarInfo", new object[] {
                    code,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble}, this.InsertCarInfoOperationCompleted, userState);
    }
    
    private void OnInsertCarInfoCompleted(object arg) {
        if ((this.InsertCarInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InsertCarInfoCompleted(this, new InsertCarInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CarInfo에 정보를 수정하는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/UpdateCarInfo", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("EventResult")]
    public EventResult UpdateCarInfo(int targetID, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble) {
        object[] results = this.Invoke("UpdateCarInfo", new object[] {
                    targetID,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble});
        return ((EventResult)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateCarInfo(int targetID, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCarInfo", new object[] {
                    targetID,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble}, callback, asyncState);
    }
    
    public EventResult EndUpdateCarInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventResult)(results[0]));
    }
    
    public void UpdateCarInfoAsync(int targetID, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble) {
        this.UpdateCarInfoAsync(targetID, nameKr, carModel, requireLevel, controlProperty, power, weight, grip, gearBox, brakeStepDec, durability, boostPower, boostTime, rpm, rpmMax, rpmBoost, gearLimit, resourceType, payCoin, payDollar, sellDollar, couponCount, sponsorAble, null);
    }
    
    public void UpdateCarInfoAsync(int targetID, string nameKr, int carModel, int requireLevel, int controlProperty, int power, int weight, int grip, int gearBox, int brakeStepDec, int durability, int boostPower, int boostTime, int rpm, int rpmMax, int rpmBoost, int gearLimit, int resourceType, int payCoin, int payDollar, int sellDollar, int couponCount, bool sponsorAble, object userState) {
        if ((this.UpdateCarInfoOperationCompleted == null)) {
            this.UpdateCarInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCarInfoCompleted);
        }
        this.InvokeAsync("UpdateCarInfo", new object[] {
                    targetID,
                    nameKr,
                    carModel,
                    requireLevel,
                    controlProperty,
                    power,
                    weight,
                    grip,
                    gearBox,
                    brakeStepDec,
                    durability,
                    boostPower,
                    boostTime,
                    rpm,
                    rpmMax,
                    rpmBoost,
                    gearLimit,
                    resourceType,
                    payCoin,
                    payDollar,
                    sellDollar,
                    couponCount,
                    sponsorAble}, this.UpdateCarInfoOperationCompleted, userState);
    }
    
    private void OnUpdateCarInfoCompleted(object arg) {
        if ((this.UpdateCarInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCarInfoCompleted(this, new UpdateCarInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CarInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCarInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCarInfoList() {
        object[] results = this.Invoke("GetCarInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCarInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCarInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCarInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCarInfoListAsync() {
        this.GetCarInfoListAsync(null);
    }
    
    public void GetCarInfoListAsync(object userState) {
        if ((this.GetCarInfoListOperationCompleted == null)) {
            this.GetCarInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarInfoListCompleted);
        }
        this.InvokeAsync("GetCarInfoList", new object[0], this.GetCarInfoListOperationCompleted, userState);
    }
    
    private void OnGetCarInfoListCompleted(object arg) {
        if ((this.GetCarInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCarInfoListCompleted(this, new GetCarInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///차량부품등급(CarPartGrade)의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCarPartGradeList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCarPartGradeList() {
        object[] results = this.Invoke("GetCarPartGradeList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCarPartGradeList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCarPartGradeList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCarPartGradeList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCarPartGradeListAsync() {
        this.GetCarPartGradeListAsync(null);
    }
    
    public void GetCarPartGradeListAsync(object userState) {
        if ((this.GetCarPartGradeListOperationCompleted == null)) {
            this.GetCarPartGradeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarPartGradeListCompleted);
        }
        this.InvokeAsync("GetCarPartGradeList", new object[0], this.GetCarPartGradeListOperationCompleted, userState);
    }
    
    private void OnGetCarPartGradeListCompleted(object arg) {
        if ((this.GetCarPartGradeListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCarPartGradeListCompleted(this, new GetCarPartGradeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///차량부품레벨(CarPartLevel)의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCarPartLevelList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCarPartLevelList() {
        object[] results = this.Invoke("GetCarPartLevelList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCarPartLevelList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCarPartLevelList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCarPartLevelList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCarPartLevelListAsync() {
        this.GetCarPartLevelListAsync(null);
    }
    
    public void GetCarPartLevelListAsync(object userState) {
        if ((this.GetCarPartLevelListOperationCompleted == null)) {
            this.GetCarPartLevelListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarPartLevelListCompleted);
        }
        this.InvokeAsync("GetCarPartLevelList", new object[0], this.GetCarPartLevelListOperationCompleted, userState);
    }
    
    private void OnGetCarPartLevelListCompleted(object arg) {
        if ((this.GetCarPartLevelListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCarPartLevelListCompleted(this, new GetCarPartLevelListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CardInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetCardInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetCardInfoList() {
        object[] results = this.Invoke("GetCardInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetCardInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCardInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetCardInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetCardInfoListAsync() {
        this.GetCardInfoListAsync(null);
    }
    
    public void GetCardInfoListAsync(object userState) {
        if ((this.GetCardInfoListOperationCompleted == null)) {
            this.GetCardInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCardInfoListCompleted);
        }
        this.InvokeAsync("GetCardInfoList", new object[0], this.GetCardInfoListOperationCompleted, userState);
    }
    
    private void OnGetCardInfoListCompleted(object arg) {
        if ((this.GetCardInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCardInfoListCompleted(this, new GetCardInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///MaterialInfo의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetMaterialInfoList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetMaterialInfoList() {
        object[] results = this.Invoke("GetMaterialInfoList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetMaterialInfoList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMaterialInfoList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetMaterialInfoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetMaterialInfoListAsync() {
        this.GetMaterialInfoListAsync(null);
    }
    
    public void GetMaterialInfoListAsync(object userState) {
        if ((this.GetMaterialInfoListOperationCompleted == null)) {
            this.GetMaterialInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaterialInfoListCompleted);
        }
        this.InvokeAsync("GetMaterialInfoList", new object[0], this.GetMaterialInfoListOperationCompleted, userState);
    }
    
    private void OnGetMaterialInfoListCompleted(object arg) {
        if ((this.GetMaterialInfoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMaterialInfoListCompleted(this, new GetMaterialInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///LuckyBox의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetLuckyBoxList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetLuckyBoxList() {
        object[] results = this.Invoke("GetLuckyBoxList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetLuckyBoxList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLuckyBoxList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetLuckyBoxList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetLuckyBoxListAsync() {
        this.GetLuckyBoxListAsync(null);
    }
    
    public void GetLuckyBoxListAsync(object userState) {
        if ((this.GetLuckyBoxListOperationCompleted == null)) {
            this.GetLuckyBoxListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLuckyBoxListCompleted);
        }
        this.InvokeAsync("GetLuckyBoxList", new object[0], this.GetLuckyBoxListOperationCompleted, userState);
    }
    
    private void OnGetLuckyBoxListCompleted(object arg) {
        if ((this.GetLuckyBoxListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLuckyBoxListCompleted(this, new GetLuckyBoxListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///LuckyBoxGood의 전체 목록을 불러오는 메소드
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gabangmanstudio.com/GetLuckyBoxGoodList", RequestNamespace="http://gabangmanstudio.com/", ResponseNamespace="http://gabangmanstudio.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Data.DataSet GetLuckyBoxGoodList() {
        object[] results = this.Invoke("GetLuckyBoxGoodList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetLuckyBoxGoodList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLuckyBoxGoodList", new object[0], callback, asyncState);
    }
    
    public System.Data.DataSet EndGetLuckyBoxGoodList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    public void GetLuckyBoxGoodListAsync() {
        this.GetLuckyBoxGoodListAsync(null);
    }
    
    public void GetLuckyBoxGoodListAsync(object userState) {
        if ((this.GetLuckyBoxGoodListOperationCompleted == null)) {
            this.GetLuckyBoxGoodListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLuckyBoxGoodListCompleted);
        }
        this.InvokeAsync("GetLuckyBoxGoodList", new object[0], this.GetLuckyBoxGoodListOperationCompleted, userState);
    }
    
    private void OnGetLuckyBoxGoodListCompleted(object arg) {
        if ((this.GetLuckyBoxGoodListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLuckyBoxGoodListCompleted(this, new GetLuckyBoxGoodListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gabangmanstudio.com/")]
/*
public partial class EventResult {
    
    private string requestMethodField;
    
    private int resultCodeField;
    
    private string resultReferenceField;
    
    private bool battelEventField;
    
    private System.DateTime requestTimeField;
    
    private System.DateTime responseTimeField;
    
    /// <remarks/>
    public string RequestMethod {
        get {
            return this.requestMethodField;
        }
        set {
            this.requestMethodField = value;
        }
    }
    
    /// <remarks/>
    public int ResultCode {
        get {
            return this.resultCodeField;
        }
        set {
            this.resultCodeField = value;
        }
    }
    
    /// <remarks/>
    public string ResultReference {
        get {
            return this.resultReferenceField;
        }
        set {
            this.resultReferenceField = value;
        }
    }
    
    /// <remarks/>
    public bool BattelEvent {
        get {
            return this.battelEventField;
        }
        set {
            this.battelEventField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime RequestTime {
        get {
            return this.requestTimeField;
        }
        set {
            this.requestTimeField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime ResponseTime {
        get {
            return this.responseTimeField;
        }
        set {
            this.responseTimeField = value;
        }
    }
}
*/
public partial class InsertPlatformInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertPlatformInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
} 

public delegate void InsertPlatformInfoCompletedEventHandler(object sender, InsertPlatformInfoCompletedEventArgs args);

public partial class UpdatePlatformInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdatePlatformInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdatePlatformInfoCompletedEventHandler(object sender, UpdatePlatformInfoCompletedEventArgs args);

public partial class GetPlatformInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPlatformInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetPlatformInfoListCompletedEventHandler(object sender, GetPlatformInfoListCompletedEventArgs args);

public partial class InsertSeasonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertSeasonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertSeasonInfoCompletedEventHandler(object sender, InsertSeasonInfoCompletedEventArgs args);

public partial class UpdateSeasonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateSeasonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateSeasonInfoCompletedEventHandler(object sender, UpdateSeasonInfoCompletedEventArgs args);

public partial class GetSeasonInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSeasonInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetSeasonInfoListCompletedEventHandler(object sender, GetSeasonInfoListCompletedEventArgs args);

public partial class GetTrackInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetTrackInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetTrackInfoListCompletedEventHandler(object sender, GetTrackInfoListCompletedEventArgs args);

public partial class InsertCrewInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertCrewInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertCrewInfoCompletedEventHandler(object sender, InsertCrewInfoCompletedEventArgs args);

public partial class UpdateCrewInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCrewInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateCrewInfoCompletedEventHandler(object sender, UpdateCrewInfoCompletedEventArgs args);

public partial class GetCrewInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCrewInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCrewInfoListCompletedEventHandler(object sender, GetCrewInfoListCompletedEventArgs args);

public partial class InsertCarClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertCarClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertCarClassCompletedEventHandler(object sender, InsertCarClassCompletedEventArgs args);

public partial class UpdateCarClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCarClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateCarClassCompletedEventHandler(object sender, UpdateCarClassCompletedEventArgs args);

public partial class GetCarClassListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCarClassListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCarClassListCompletedEventHandler(object sender, GetCarClassListCompletedEventArgs args);

public partial class InsertCarInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InsertCarInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void InsertCarInfoCompletedEventHandler(object sender, InsertCarInfoCompletedEventArgs args);

public partial class UpdateCarInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCarInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public EventResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventResult)(this.results[0]));
        }
    }
}

public delegate void UpdateCarInfoCompletedEventHandler(object sender, UpdateCarInfoCompletedEventArgs args);

public partial class GetCarInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCarInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCarInfoListCompletedEventHandler(object sender, GetCarInfoListCompletedEventArgs args);

public partial class GetCarPartGradeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCarPartGradeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCarPartGradeListCompletedEventHandler(object sender, GetCarPartGradeListCompletedEventArgs args);

public partial class GetCarPartLevelListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCarPartLevelListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCarPartLevelListCompletedEventHandler(object sender, GetCarPartLevelListCompletedEventArgs args);

public partial class GetCardInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCardInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetCardInfoListCompletedEventHandler(object sender, GetCardInfoListCompletedEventArgs args);

public partial class GetMaterialInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMaterialInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetMaterialInfoListCompletedEventHandler(object sender, GetMaterialInfoListCompletedEventArgs args);

public partial class GetLuckyBoxListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLuckyBoxListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetLuckyBoxListCompletedEventHandler(object sender, GetLuckyBoxListCompletedEventArgs args);

public partial class GetLuckyBoxGoodListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLuckyBoxGoodListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

public delegate void GetLuckyBoxGoodListCompletedEventHandler(object sender, GetLuckyBoxGoodListCompletedEventArgs args);
